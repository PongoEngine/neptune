EConst(c:Constant)
EArray(e1:Expr, e2:Expr)
EBinop(op:Binop, e1:Expr, e2:Expr)
EField(e:Expr, field:String)
EParenthesis(e:Expr)
EObjectDecl(fields:Array<ObjectField>)
EArrayDecl(values:Array<Expr>)
ECall(e:Expr, params:Array<Expr>)
ENew(t:TypePath, params:Array<Expr>)
EUnop(op:Unop, postFix:Bool, e:Expr)
e++ (op = OpIncrement, postFix = true)
e-- (op = OpDecrement, postFix = true)
++e (op = OpIncrement, postFix = false)
--e (op = OpDecrement, postFix = false)
-e (op = OpNeg, postFix = false)
!e (op = OpNot, postFix = false)
~e (op = OpNegBits, postFix = false)
EVars(vars:Array<Var>)
EFunction(kind:Null<FunctionKind>, f:Function)
EBlock(exprs:Array<Expr>)
EFor(it:Expr, expr:Expr)
EIf(econd:Expr, eif:Expr, eelse:Null<Expr>)
EWhile(econd:Expr, e:Expr, normalWhile:Bool)
ESwitch(e:Expr, cases:Array<Case>, edef:Null<Expr>)
ETry(e:Expr, catches:Array<Catch>)
EReturn(e:Expr)
EBreak
EContinue
EUntyped(e:Expr)
EThrow(e:Expr)
ECast(e:Expr, t:Null<ComplexType>)
EDisplay(e:Expr, displayKind:DisplayKind)
EDisplayNew(t:TypePath)
ETernary(econd:Expr, eif:Expr, eelse:Expr)
ECheckType(e:Expr, t:ComplexType)
EMeta(s:MetadataEntry, e:Expr)