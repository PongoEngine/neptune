// Generated by Haxe 4.2.1+bf9ff69
(function ($global) { "use strict";
var Expressions = function() {
};
Expressions.prototype = {
	template: function() {
		var x = 3;
		var onClick = function() {
			x += 1;
			console.log("src/Expressions.hx:42:",x);
		};
		var element_0 = window.document.createElement("div");
		neptune_html_HtmlElement.addChild(element_0,window.document.createTextNode("\n                "));
		var element_1 = window.document.createElement("button");
		element_1.setAttribute("id","hello");
		element_1.addEventListener("click",onClick);
		neptune_html_HtmlElement.addChild(element_1,window.document.createTextNode("Increment"));
		neptune_html_HtmlElement.addChild(element_0,element_1);
		neptune_html_HtmlElement.addChild(element_0,window.document.createTextNode("\n                "));
		if(x == 4) {
			neptune_html_HtmlElement.addChild(window.document.createElement("h3"),31);
		}
		neptune_html_HtmlElement.addChild(element_0,x);
		neptune_html_HtmlElement.addChild(element_0,window.document.createTextNode("\n            "));
		return element_0;
	}
};
var Main = function() { };
Main.main = function() {
	var template = new Expressions().template();
	window.document.body.appendChild(template);
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var neptune_html_HtmlElement = {};
neptune_html_HtmlElement.addChild = function(this1,child) {
	if(child != null) {
		var childType = typeof(child);
		switch(childType) {
		case "bigint":case "function":case "symbol":case "undefined":
			console.warn(("Invalid child type: " + childType));
			break;
		case "object":
			if(neptune_html_HtmlElement.getType(child) == "Node") {
				this1.appendChild(child);
			} else {
				console.warn(("Invalid child type: " + childType));
			}
			break;
		case "boolean":case "number":case "string":
			var text = child.toString();
			this1.appendChild(window.document.createTextNode(text));
			break;
		}
	}
	return this1;
};
neptune_html_HtmlElement.getType = function(child) {
	while(true) {
		var proto = Object.getPrototypeOf(child);
		if(proto != null && proto.constructor.name != "EventTarget") {
			child = proto;
			continue;
		} else {
			return child.constructor.name;
		}
	}
};
Main.main();
})({});
