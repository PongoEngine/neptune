// Generated by Haxe 4.1.3
(function ($global) { "use strict";
class HelloWorld {
	constructor() {
		this.hai = "Hai";
		this.numba = 1;
		let text = this.numba;
		this.var_0 = window.document.createTextNode(text);
		this.var_1 = window.document.createTextNode(this.hai);
	}
	handleClick() {
		let _g = this;
		_g.set_numba(_g.numba + 1);
	}
	template() {
		let div = window.document.createElement("div");
		div.appendChild(window.document.createTextNode(" "));
		let h2 = window.document.createElement("h2");
		h2.appendChild(this.var_0);
		h2.appendChild(window.document.createTextNode(" - "));
		h2.appendChild(this.var_1);
		div.appendChild(h2);
		div.appendChild(window.document.createTextNode(" "));
		let button = window.document.createElement("button");
		button.setAttribute("class","button");
		button.addEventListener("click",$bind(this,this.handleClick));
		button.appendChild(window.document.createTextNode("Increment"));
		div.appendChild(button);
		div.appendChild(window.document.createTextNode(" "));
		return div;
	}
	set_numba(val) {
		this.numba = val;
		neptune_lib_Runtime.updateDependencies(this.numba,[neptune_lib_Runtime.updateTextNode(this.var_0)]);
		return val;
	}
}
class Main {
	static main() {
		let helloWorld = new HelloWorld();
		window.document.body.appendChild(helloWorld.template());
	}
}
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
class neptune_lib_Runtime {
	static updateDependencies(identifer,cbs) {
		let _g = 0;
		while(_g < cbs.length) cbs[_g++](identifer);
	}
	static updateTextNode(text) {
		return function(content) {
			text.textContent = content;
		};
	}
}
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
